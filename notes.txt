----------------------------------------------
- Build classes to load assets.
    - The best way to deal with graphics assets in a 2d game is to load them from a textureatlas.
        Libgdx has a tool to build a texture atlas. Its called texture packer:
        https://github.com/libgdx/libgdx/wiki/Texture-packer
        It loads all of the image asset files, combines them all into a texture atlas image file,
            creates a text file which defines how to parse the texture atlas to retrieve each
            image.

        The textureatlas can be created using gradle. In build.gradle...
        1. add the classpath 'com.badlogicgames.gdx:gdx-tools:1.7.0' to buildscript dependencies.
        2. import TexturePacker at top of build.gradle
        3. define packTextures task in build.gradle. This will execute TexturePacker to create
            the textureatlas.
        4. declare the dependency of compileJava on the packTextures task defined above. now
            textureatlas will always be created before code is compiled.

        If you build project at this point the textureatlas files should be created.
----------------------------------------------
- Project layout

Here is a high level layout of this games code structure.

`GigaGalGame extends Game` will be application listener.

    - a single screen is being used in game. all `GigaGalGame` is responsible for is delegating
        it's callbacks to a new `GameplayScreen`.

`GameplayScreen extends ScreenAdapter` it sets up the drawing environment and viewport,
    and initializes the `Assets` class.

`Level` holds on to the entities that make up the level, such as GigaGal herself, the platforms,
    the enemies, the bullets, etc. The important methods on `Level` are `update` and `render`.

## Entitites

`GigaGal` controls and draws GigaGal, keeping track of her position, velocity, her facing direction,
 and so on. Also handles user input controlling GigaGal's movement.

`Platform` holds on to the position and dimensions of a particular platform that GigaGal can jump
    on. Doesn't need to do anything to update, but knows how to draw itself.

## Utilities

`Assets implements Disposable, AssetErrorListener` is a singleton that loads and holds onto the
texture atlas containing all GigaGal's assets.

`Constants` is a static class that contains all the constants for stuff like sprite names,
    dimensions, speeds, accelerations, etc.

# Render

A chain of events that is kicked off every frame.

    - When `render()` is called on `GigaGalGame`, that call is redirected to `GamePlayScreen`.
    - `GamePlayScreen` then calls `update` on the current `Level`,
    - which in turn calls `update` on all the entities in the level.
    - In response to the `update` call, the entities move themselves, interact, and handle user
        input as necessary.
    - Once all the entities contained in the `Level` have updated themselves,
        `GamePlayScreen` begins a `SpriteBatch`, and calls `render` on the `Level`.
    - The `Level` then calls `render` on all the entities it contains, in background to foreground
        order.
    - When `Level` returns from `render`, `GamePlayScreen` ends the `SpriteBatch`, and the `render`
        call returns.

