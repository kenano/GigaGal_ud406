----------------------------------------------
Jumping Sprites
- Display the correct image when GigaGal is jumping.

    - In Constants: Add constants for the jumping-right and jumping-left sprites.
    - In Assets: In inner class GigaGalAssets, add member AtlasRegion variables: for jumping-left
        and jumping-right, atlasRegionJumpingRight/atlasRegionJumpingLeft.
        - In the constructor initialize these members to the correct region from the atlas map.
    In GigaGal: Select the correct region based on facing and jumpState. This can be done with
        embedded if blocks.

----------------------------------------------
Jumping

    - GigaGal can be in one of three possible JumpStates. GROUNDED, FALLING, JUMPING.
        - If she's GROUNDED, and the player hits the jump button, three things happen:
            1. set GigaGals's JumpState to JUMPING.
            2. set GigaGal's vertical speed to some pre-defined value.
            3. save the time at which the jump starts.
        - When GigaGal is in the JUMPING JumpState, every frame we check to see if the jump button
            is still pressed.
                - If not, we set JumpState to FALLING.
                - If the jump button is still pressed, we then check how long it's been since the
                    jump started.
        - If it's been longer than some predetermined time, the jump is over, and it's also time to
            set GigaGal's state to FALLING. Otherwise, we again set her vertical velocity to the
                same predetermined jump speed.
        - Finally, when GigaGal is falling, we simply apply gravitational acceleration, and ignore
            the jump button.

    - Create a member vars: Vector2 for GGs velocity: mVelocity, a JumpState (see below)
        mJumpingState, and long mJumpStartTime.
    - In GigaGal constructor initialize mVelocity and mJumpingState.  (probably to FALLING
        tested this with setting to GROUNDED. This Also seemed to work so Im not sure why). Maybe
        because GG might be initialized above thw ground. Update checks when to set 'GROUNDED'.
    - In GigaGal.update:
        - Accelerate GigaGal down. Multiple delta by the acceleration due to gravity and subtract it
            from GG's vertical velocity.
        - Apply GigaGal's velocity to her position. Vector2.mulAdd() is very convenient for this
            operation. Its scales a vector (by delta) then adds it (to the position vector).
        - Check GGs JumpState if she isn't JUMPING, make her now FALLING.
        - Check if GigaGal has landed on the ground. Remember that position keeps track of GigaGal's
            eye position, not her feet.If she has indeed landed, change her jumpState to GROUNDED,
            set her vertical velocity to 0, and make sure her feet aren't sticking into the floor.
        - Handle jump key. Add a switch statement. If the jump key is pressed and GG is GROUNDED,
            then startJump(). If she's JUMPING, then continueJump(). If she's falling, then don't do
            anything. If the jump key wasn't pressed, endJump().
    - Create JumpState enum containing JUMPING, FALLING, and GROUNDED. This defines to possible
        states GG can be in.
    - Create method startJump: Set jumpState to JUMPING, Set the jump start time. Use
        TimeUtils.nanoTime(). Call continueJump().
    - Create method continueJump.:if GG is already jumping and user is still pressing the jump
        button, she should continue to jump higher for some reasonable amount of time. (this
        achieves variable jumping).
        -  First, check if we're JUMPING, if not, just return.
        - Find out how long we've been jumping. This will require a utility method
        (MathUtils.nanoToSecto convert to seconds.
        - If we have been jumping for less than the max jump duration, set GG's vertical to the
           jump speed constant. Else, call endJump().
    - Create method endJump: Check If JUMPING, if so, set jumpstate to FALLING.

    - In Constants:
        - Gigagals jump speed, jump duration max, acceleration due to gravity.
----------------------------------------------
GigaGal facing direction

    Drawing the correct sprite for GigaGal at the correct time depends on the direction GG is moving
    loading up the standing-left sprite in our `Assets` singleton, keeping track of what direction
    GigaGal is facing, and draw the right texture in GigaGal's `render()` method.

    - Add a constant for the name of the standing-left sprite.
    - Define a private enum Facing to define the possible directions GG could be facing (LEFT,
    RIGHT)
    - In GigaGal class Add a  member variable mFacingDirection to store which direction GG is
    facing. This is determined by the direction GG is moving (what direction the user is entering).
    - Initialize the facing direction member.
    - Update mFacingDirection moveRight/moveLeft.
    - In the render method create a TextureRegion variable and initialize it to null.
    - Assign a texture (image) to the variable created above based on the value of mFacingDirection.

----------------------------------------------
move GigaGal left and right using the arrow keys.

    - Define methods in GigaGal: moveLeft(float delta) and moveRight... They update GGa position
        based on GGs speed from Constants and the change rate delta parameter.

    - Use Gdx.input.isKeyPressed() to check if the left arrow key is pressed
             If so, call moveLeft Do the same with the right ArrowKey.

    - Add constant for gigagal speed.

----------------------------------------------
Pull drawing logic out of `GameplayScreen` and into `GigaGal`. Add basic implementation of `GigaGal`
    and `Level` classes.

    - the relationship between GigaGal's position and where we draw her sprite. needs to be defined.
     GigaGal will be drawn using different sprites (for jumping, walking, standing, etc.), make sure
     that it doesn't look like she's moving around when we switch sprites. Therefore, GigaGal's
     `position` is a `Vector2` that defines NOT the location of her feet or her bottom left corner,
     but rather  her eye level as a reference point.

    - In constants define VECTOR_GIGAGAL_EYE_POSITION which is a vector where GGs eyes are within
    the sprite.
    - Also define FLOAT_GIGAGAL_FEET_TO_EYES_DIST which is  float representing the distance from
    GGs eyes to feet.
    - In GigaGal add member Vector2 for GGs position.
        - In GGs constructor initialize GGs position. Use FLOAT_GIGAGAL_FEET_TO_EYES_DIST for this.
        - Draw GigaGal's standing-right sprite at position - GIGAGAL_EYE_POSITION.
        - Implement render(). Copy draw() from Gameplayscreen. each element should manage its
            rendering. The SpriteBatch used to draw is passed from Gameplayscreen to GG.
    - Add basic implementation for Level:
        - add GigaGal member variable.
        - Initialize GG in the constructor.
        - Implement methods update, render.
    - In GameplayScreen:
        - define a GigaGal member.
        - Initialize/create gigagal in the constructor.
        - Implement render and update methods.
            - In render Call update() on the Level. and level.render().
            -

----------------------------------------------
- Implement the GameplayScreen class. Have it draw the Gigagal sprite.

    - Create memebers: a SpriteBatch, ExtendedViewport.
    -  Initialize the Assets instance. It is a singleton and the class doesnt allow it to directly
        be created. use init to get the one instance of the class.
    -  Initialize the SpriteBatch. The no params constructor Constructs a new SpriteBatch with a
        size of 1000, one buffer, and the default shader.
    - Initialize the ExtendedViewport. Pass it the Worldsize constant.
    - Update the viewport in resize.
    - In render, apply the viewport.
    - Set clear color to what is specified in constants. Clear the background.
    - Set the SpriteBatch's projection matrix to the ExtendedViewports Camera.combined projection
        matrix.
    - Begin the Sprite batch, invoke its draw method to draw GigaGal on screen.
    - Override dispose to dispose of SpriteBatch and Assets.

    - Change GigaGalGame parent class to Game.
    - In its create method set screen to GameplayScreen.
----------------------------------------------
- Create the Assets class. It manages all of the assets used.
    It implements Disposable and AssetErrorListener.

   - It is a singleton so its constructor has been marked private. Its only public instance is
        available from a static instance assetsInstance.
   - Its init method initializes the asset manager from textureatlas.
   - Has inner class GigaGalAssets which stores the assets for the Gigagal entity.
----------------------------------------------

- The best way to deal with graphics assets in a 2d game is to load them from a textureatlas.
    Libgdx has a tool to build a texture atlas. Its called texture packer:
    https://github.com/libgdx/libgdx/wiki/Texture-packer
    It loads all of the image asset files, combines them all into a texture atlas image file,
        creates a text file which defines how to parse the texture atlas to retrieve each
        image.

    The textureatlas can be created using gradle. In build.gradle...
    1. add the classpath 'com.badlogicgames.gdx:gdx-tools:1.7.0' to buildscript dependencies.
    2. import TexturePacker at top of build.gradle
    3. define packTextures task in build.gradle. This will execute TexturePacker to create
        the textureatlas.
    4. declare the dependency of compileJava on the packTextures task defined above. now
        textureatlas will always be created before code is compiled.

    If you build project at this point the textureatlas files should be created.

----------------------------------------------
- Project layout

Here is a high level layout of this games code structure.

`GigaGalGame extends Game` will be application listener.

    - a single screen is being used in game. all `GigaGalGame` is responsible for is delegating
        it's callbacks to a new `GameplayScreen`.

`GameplayScreen extends ScreenAdapter` it sets up the drawing environment and viewport,
    and initializes the `Assets` class.

`Level` holds on to the entities that make up the level, such as GigaGal herself, the platforms,
    the enemies, the bullets, etc. The important methods on `Level` are `update` and `render`.

## Entitites

`GigaGal` controls and draws GigaGal, keeping track of her position, velocity, her facing direction,
 and so on. Also handles user input controlling GigaGal's movement.

`Platform` holds on to the position and dimensions of a particular platform that GigaGal can jump
    on. Doesn't need to do anything to update, but knows how to draw itself.

## Utilities

`Assets implements Disposable, AssetErrorListener` is a singleton that loads and holds onto the
texture atlas containing all GigaGal's assets.

`Constants` is a static class that contains all the constants for stuff like sprite names,
    dimensions, speeds, accelerations, etc.

# Render

A chain of events that is kicked off every frame.

    - When `render()` is called on `GigaGalGame`, that call is redirected to `GamePlayScreen`.
    - `GamePlayScreen` then calls `update` on the current `Level`,
    - which in turn calls `update` on all the entities in the level.
    - In response to the `update` call, the entities move themselves, interact, and handle user
        input as necessary.
    - Once all the entities contained in the `Level` have updated themselves,
        `GamePlayScreen` begins a `SpriteBatch`, and calls `render` on the `Level`.
    - The `Level` then calls `render` on all the entities it contains, in background to foreground
        order.
    - When `Level` returns from `render`, `GamePlayScreen` ends the `SpriteBatch`, and the `render`
        call returns.